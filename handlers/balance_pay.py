import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from boostx_ext.balance import get_balance, set_balance, create_invoice, confirm_invoice

ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
PAY_INSTRUCTIONS = os.getenv("PAY_INSTRUCTIONS","–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç.")
PAY_URL = os.getenv("PAY_URL","https://www.tinkoff.ru/rm/r_nIutIhQtbX.tRouMxMcdC/kgUL962390")

def register_balance_handlers(app: Application):
    app.add_handler(CommandHandler("balance", cmd_balance))
    app.add_handler(CommandHandler("topup", cmd_topup))
    app.add_handler(CommandHandler("confirm_payment", cmd_confirm_payment))
    app.add_handler(CommandHandler("buy", cmd_buy_stub))

async def cmd_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    bal = get_balance(uid)
    await update.message.reply_html(f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{bal:.2f} ‚ÇΩ</code>")

async def cmd_topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /topup &lt;—Å—É–º–º–∞&gt;")
        return
    try:
        amount = float(context.args[0])
        if amount <= 0:
            raise ValueError
    except Exception:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å—É–º–º—É —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0. –ù–∞–ø—Ä–∏–º–µ—Ä: /topup 300")
        return

    inv = create_invoice(update.effective_user.id, amount)
    uname = update.effective_user.username or "username"

    text = (
        f"üßæ <b>–°—á—ë—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n"
        f"ID: <code>{inv['invoice_id']}</code>\n"
        f"–°—É–º–º–∞: <b>{amount:.2f} ‚ÇΩ</b>\n\n"
        f"üëâ <a href=\"{PAY_URL}\">–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</a>\n\n"
        f"–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ: –í–∞—à @{uname} –∏ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ (ID): "
        f"<code>{inv['invoice_id']}</code>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–µ—Ä–µ–≤–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /confirm_payment {inv['invoice_id']}"
    )
    await update.message.reply_html(text)

async def cmd_confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm_payment &lt;invoice_id&gt;")
        return

    inv_id = context.args[0]
    inv = confirm_invoice(inv_id)
    if not inv:
        await update.message.reply_text("–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await update.message.reply_text(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {inv['user_id']} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {inv['amount']:.2f} ‚ÇΩ."
    )

async def cmd_buy_stub(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∫—É–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥: /catalog")
