import os
import asyncio
import html
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from boostx_ext.balance import get_balance, set_balance, create_invoice, confirm_invoice
from boostx_ext.looksmm import services as looksmm_services, add_order as looksmm_add

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
PAY_INSTRUCTIONS = os.getenv(
    "PAY_INSTRUCTIONS",
    "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç."
)

# ============================================================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
# ============================================================
def register_balance_handlers(app: Application):
    app.add_handler(CommandHandler("balance", cmd_balance))
    app.add_handler(CommandHandler("topup", cmd_topup))
    app.add_handler(CommandHandler("confirm_payment", cmd_confirm_payment))
    app.add_handler(CommandHandler("services", cmd_services))
    app.add_handler(CommandHandler("buy", cmd_buy))


# ============================================================
# –ö–æ–º–∞–Ω–¥—ã –±–∞–ª–∞–Ω—Å–∞ –∏ –æ–ø–ª–∞—Ç—ã
# ============================================================
async def cmd_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    bal = get_balance(uid)
    await update.message.reply_html(f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{bal:.2f} ‚ÇΩ</code>")


async def cmd_topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /topup <—Å—É–º–º–∞>")
        return
    try:
        amount = float(context.args[0])
        if amount <= 0:
            raise ValueError
    except Exception:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å—É–º–º—É —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0. –ù–∞–ø—Ä–∏–º–µ—Ä: /topup 300")
        return

    inv = create_invoice(update.effective_user.id, amount)
    text = (
        f"üßæ <b>–°—á—ë—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n"
        f"ID: <code>{inv['invoice_id']}</code>\n"
        f"–°—É–º–º–∞: <b>{amount:.2f} ‚ÇΩ</b>\n\n"
        f"{html.escape(PAY_INSTRUCTIONS)}\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–µ—Ä–µ–≤–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /confirm_payment {inv['invoice_id']}"
    )
    await update.message.reply_html(text)


async def cmd_confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm_payment <invoice_id>")
        return

    inv_id = context.args[0]
    inv = confirm_invoice(inv_id)
    if not inv:
        await update.message.reply_text("–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await update.message.reply_text(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {inv['user_id']} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {inv['amount']:.2f} ‚ÇΩ."
    )


# ============================================================
# –ö–æ–º–∞–Ω–¥—ã LookSMM (—É—Å–ª—É–≥–∏ –∏ –ø–æ–∫—É–ø–∫–∞)
# ============================================================
async def cmd_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = await asyncio.to_thread(looksmm_services)
        head = ["üìã –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ (–ø–µ—Ä–≤—ã–µ 10):"]
        for s in data[:10]:
            rate = s.get("rate") or s.get("price") or "‚Äî"
            head.append(f"‚Ä¢ {s['service']}: {s['name']} ‚Äî {rate} ‚ÇΩ/1000")
        head.append("\n–ö—É–ø–∏—Ç—å: /buy <service_id> <—Å—Å—ã–ª–∫–∞> <–∫–æ–ª-–≤–æ>")
        await update.message.reply_text("\n".join(head))
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥: {e}")


async def cmd_buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buy <service_id> <—Å—Å—ã–ª–∫–∞> <–∫–æ–ª-–≤–æ>")
        return

    uid = update.effective_user.id
    try:
        service_id = int(context.args[0])
        link = context.args[1]
        qty = int(context.args[2])
    except Exception:
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü—Ä–∏–º–µ—Ä: /buy 1 https://instagram.com/instagram 100")
        return

    try:
        data = await asyncio.to_thread(looksmm_services)
        svc = next((x for x in data if int(x.get("service")) == service_id), None)
        if not svc:
            await update.message.reply_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        rate = float(svc.get("rate") or 0.0)  # —Ü–µ–Ω–∞ –∑–∞ 1000
        cost = rate * (qty / 1000.0)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
        return

    bal = get_balance(uid)
    if bal < cost:
        await update.message.reply_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ ~{cost:.2f} ‚ÇΩ, –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {bal:.2f} ‚ÇΩ.\n–ü–æ–ø–æ–ª–Ω–∏—Ç—å: /topup <—Å—É–º–º–∞>"
        )
        return

    set_balance(uid, bal - cost)

    try:
        resp = await asyncio.to_thread(looksmm_add, service_id, link, qty)
        order_id = resp.get("order") if isinstance(resp, dict) else resp
        await update.message.reply_text(
            f"""‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.
ID: {order_id}
–°–ø–∏—Å–∞–Ω–æ {cost:.2f} ‚ÇΩ.
–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(uid):.2f} ‚ÇΩ"""
        )
    except Exception as e:
        set_balance(uid, bal)  # rollback
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
