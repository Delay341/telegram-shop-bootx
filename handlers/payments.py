
import os, time, random
from telebot import TeleBot, types
from utils.notify import log_admin
from .balance import add_balance

_state = {}

def _unique_amount(base: float):
    tail = random.randint(11,97)/100.0
    return round(float(base)+tail, 2)

def register_payments(bot: TeleBot):
    @bot.message_handler(commands=['pay'])
    def pay_info(m):
        text = "üí≥ –û–ø–ª–∞—Ç–∞\n\n"
        pay_link = os.getenv('CARD_DETAILS','').strip()
        pay_hint = os.getenv('PAY_INSTRUCTIONS','–í —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ: –í–∞—à @username, —É—Å–ª—É–≥—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        if pay_link: text += f"–°—Å—ã–ª–∫–∞: {pay_link}\n"
        if pay_hint: text += f"{pay_hint}\n\n"
        text += "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /paid –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ)."
        bot.reply_to(m, text)

    @bot.message_handler(commands=['topup'])
    def topup(m):
        parts = (m.text or '').split()
        if len(parts)!=2:
            bot.reply_to(m, "–§–æ—Ä–º–∞—Ç: /topup <—Å—É–º–º–∞>"); return
        try:
            base = float(parts[1].replace(',','.'))
        except Exception:
            bot.reply_to(m, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /topup 500"); return
        unique = _unique_amount(base)
        code = f"BX{int(time.time())}"
        pay_link = os.getenv('CARD_DETAILS','‚Äî')
        text = f"üßæ –°—á—ë—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n–°—É–º–º–∞ –∫ –ø–µ—Ä–µ–≤–æ–¥—É: <b>{unique:.2f} ‚ÇΩ</b>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{code}</code>\n–°—Å—ã–ª–∫–∞: {pay_link}\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /paid"
        bot.reply_to(m, text, parse_mode="HTML")
        log_admin(bot, f"üßæ –ù–æ–≤—ã–π —Å—á—ë—Ç –æ—Ç @{m.from_user.username or m.from_user.id}: base={base}, unique={unique}, code={code}")

    @bot.message_handler(commands=['paid'])
    def paid_start(m):
        _state[m.from_user.id] = {'step':'amount'}
        bot.reply_to(m, "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (—á–∏—Å–ª–æ).")

    @bot.message_handler(func=lambda msg: _state.get(msg.from_user.id,{}).get('step')=='amount')
    def paid_amount(m):
        try:
            amount = float(m.text.replace(',','.'))
            _state[m.from_user.id] = {'step':'details','amount':amount}
            bot.reply_to(m, "–û–ø–∏—à–∏—Ç–µ, –∑–∞ —á—Ç–æ –æ–ø–ª–∞—Ç–∞: —É—Å–ª—É–≥–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω —á–µ–∫–∞.")
        except Exception:
            bot.reply_to(m, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 499 –∏–ª–∏ 499.00")

    @bot.message_handler(func=lambda msg: _state.get(msg.from_user.id,{}).get('step')=='details', content_types=['text','photo'])
    def paid_details(m):
        rec = _state.get(m.from_user.id,{})
        if not rec: return
        amount = rec.get('amount',0)
        details = m.caption or m.text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"payok:{m.from_user.id}:{amount}"),
               types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"payno:{m.from_user.id}:{amount}"))
        admin_chat = int(os.getenv("ADMIN_LOG_CHAT_ID", os.getenv("ADMIN_ID","0") or 0))
        if m.photo:
            fid = m.photo[-1].file_id
            bot.send_photo(admin_chat, fid, caption=f"üí∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂\n–û—Ç: @{m.from_user.username or m.from_user.id}\nID: {m.from_user.id}\n–°—É–º–º–∞: {amount}\n–î–µ—Ç–∞–ª–∏: {details}", reply_markup=kb)
        else:
            log_admin(bot, f"üí∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂\n–û—Ç: @{m.from_user.username or m.from_user.id}\nID: {m.from_user.id}\n–°—É–º–º–∞: {amount}\n–î–µ—Ç–∞–ª–∏: {details}")
            bot.send_message(admin_chat, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        bot.reply_to(m, "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        _state.pop(m.from_user.id, None)

    @bot.callback_query_handler(func=lambda c: c.data and (c.data.startswith("payok:") or c.data.startswith("payno:")))
    def paid_review(c):
        parts = c.data.split(":"); act, uid, amount = parts[0], int(parts[1]), parts[2]
        if str(c.from_user.id) != os.getenv("ADMIN_ID",""):
            bot.answer_callback_query(c.id, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å", show_alert=True); return
        if act=="payok":
            add_balance(uid, float(amount))
            bot.answer_callback_query(c.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ", show_alert=False)
            bot.send_message(uid, f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {amount} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
            log_admin(bot, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}, —Å—É–º–º–∞ {amount}")
        else:
            bot.answer_callback_query(c.id, "–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå", show_alert=False)
            bot.send_message(uid, "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.")
            log_admin(bot, f"‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}, —Å—É–º–º–∞ {amount}")
