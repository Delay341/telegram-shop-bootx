
# -*- coding: utf-8 -*-
import os
import json
import html
from dataclasses import dataclass
from datetime import datetime
from threading import Lock
from pathlib import Path
from typing import Dict, List, Tuple

from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CARD_DETAILS = os.getenv("CARD_DETAILS", "https://www.tinkoff.ru/rm/r_nIutIhQtbX.tRouMxMcdC/kgUL962390")
PAY_INSTRUCTIONS = os.getenv("PAY_INSTRUCTIONS", "–í —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ø–µ—Ä–µ–≤–µ–¥—É —É–∫–∞–∂–∏—Ç–µ: –í–∞—à @username, —É—Å–ª—É–≥—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
ORDERS_FILE = Path(os.getenv("ORDERS_FILE", "orders.json"))

if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Render ‚Üí Environment Variables.")

# ‚Äî‚Äî‚Äî –ö–∞—Ç–∞–ª–æ–≥
@dataclass(frozen=True)
class Product:
    id: str
    title: str
    price: int
    description: str

PRODUCTS: Dict[str, Product] = {
    "BASIC": Product("BASIC", 'üíé –ü–∞–∫–µ—Ç "–ë–ê–ó–û–í–´–ô –°–¢–ê–†–¢"', 1500,
        "üíô –ê—É–¥–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≤–∏–∑—É–∞–ª–∞\nüíô –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–æ—Å—Ç–∞\nüíô –ê–Ω–∞–ª–∏–∑ 3 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤\nüíô –ì–∞–π–¥ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"),
    "STRATEGY": Product("STRATEGY", 'üíé –ü–∞–∫–µ—Ç "–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ô –†–´–í–û–ö"', 3000,
        "üíô –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –≤—Å–µ—Ö –ø–ª–æ—â–∞–¥–æ–∫\nüíô –ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏\nüíô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞\nüíô –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏"),
    "UPGRADE": Product("UPGRADE", 'üíé –ü–∞–∫–µ—Ç "–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ü–ì–†–ï–ô–î"', 5000,
        "üíô –†–µ–±—Ä–µ–Ω–¥–∏–Ω–≥ –≤–∏–∑—É–∞–ª–∞ (–æ–±–ª–æ–∂–∫–∏, —à–∞–±–ª–æ–Ω—ã)\nüíô –ï–¥–∏–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è 2 –ø–ª–∞—Ç—Ñ–æ—Ä–º\nüíô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Ads\nüíô –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
    "TG_DESIGN": Product("TG_DESIGN", "üé® –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–∞", 500,
        "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å\n‚Ä¢ –®–∞–ø–∫–∞/—à–∞–±–ª–æ–Ω—ã\n‚Ä¢ –ü–∞–ª–∏—Ç—Ä–∞/—à—Ä–∏—Ñ—Ç—ã\n‚Ä¢ –†–æ—Å—Ç —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç–∏"),
    "VK_DESIGN": Product("VK_DESIGN", "üî• –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –í–ö", 500,
        "‚Ä¢ –®–∞–ø–∫–∞/–º–µ–Ω—é\n‚Ä¢ –û–±–ª–æ–∂–∫–∏\n‚Ä¢ –®–∞–±–ª–æ–Ω—ã –ø–æ—Å—Ç–æ–≤\n‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –¶–ê"),
}

CART: Dict[int, Dict[str, int]] = {}
CART_LOCK = Lock()
ASK_CONTACT, ASK_NOTE, ASK_TXN = range(3)
ASK_QUESTION = 1001
DIV = "‚îÄ"*42

def menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([["–ö–∞—Ç–∞–ª–æ–≥","–ö–æ—Ä–∑–∏–Ω–∞"],["üìû –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å","üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º"]], resize_keyboard=True)

def catalog_ikb() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(f"{p.title} ‚Äî {p.price}‚ÇΩ", callback_data=f"view:{p.id}")] for p in PRODUCTS.values()]
    return InlineKeyboardMarkup(rows)

def product_ikb(pid: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add:{pid}")],
                                 [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back:catalog")]])

def cart_ikb(has_items: bool) -> InlineKeyboardMarkup:
    rows = []
    if has_items:
        rows += [[InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
                 [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear")]]
    rows += [[InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back:catalog")]]
    return InlineKeyboardMarkup(rows)

def get_cart(uid:int) -> Dict[str,int]:
    with CART_LOCK:
        return CART.setdefault(uid, {})

def cart_summary(uid:int) -> Tuple[str,int]:
    items = get_cart(uid)
    if not items: return ("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",0)
    lines=[f"<b>üß∫ –ö–æ—Ä–∑–∏–Ω–∞</b>\n{DIV}"]; total=0
    for pid,qty in items.items():
        p=PRODUCTS.get(pid); 
        if not p: continue
        s=p.price*qty; total+=s
        lines.append(f"‚Ä¢ {p.title} √ó {qty} = <b>{s}‚ÇΩ</b>")
    lines.append(f"{DIV}\n<b>–ò—Ç–æ–≥–æ: {total}‚ÇΩ</b>")
    return ("\n".join(lines), total)

def append_order(order:dict)->None:
    data=[]
    if ORDERS_FILE.exists():
        try: data=json.loads(ORDERS_FILE.read_text("utf-8"))
        except: data=[]
    data.append(order)
    ORDERS_FILE.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")

def user_mention(u)->str:
    if getattr(u,"username",None): return f"@{u.username}"
    name=f"{u.first_name or ''} {u.last_name or ''}".strip()
    return name or f"id:{u.id}"

# ‚Äî‚Äî‚Äî Handlers –∫–∞—Ç–∞–ª–æ–≥–∞/–∫–æ—Ä–∑–∏–Ω—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BoostX!\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É.",
        reply_markup=menu_kb()
    )

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    header=f"<b>–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥</b>\n{DIV}\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∏–∂–µ:"
    if update.message:
        await update.message.reply_text(header, parse_mode=ParseMode.HTML)
        await update.message.reply_text("‚ñº", reply_markup=catalog_ikb())
    else:
        q=update.callback_query
        await q.message.edit_text(header, parse_mode=ParseMode.HTML, reply_markup=catalog_ikb())
        await q.answer()

async def view_product_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q=update.callback_query
    pid=q.data.split(":",1)[1]
    p=PRODUCTS.get(pid)
    if not p: 
        await q.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True); return
    text=f"<b>{p.title}</b>\n{DIV}\n{p.description}\n\n–¶–µ–Ω–∞: <b>{p.price}‚ÇΩ</b>"
    await q.message.edit_text(text, reply_markup=product_ikb(p.id), parse_mode=ParseMode.HTML)
    await q.answer()

async def add_to_cart_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q=update.callback_query
    pid=q.data.split(":",1)[1]
    if pid not in PRODUCTS: 
        await q.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True); return
    items=get_cart(q.from_user.id); items[pid]=items.get(pid,0)+1
    await q.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É")
    text,_=cart_summary(q.from_user.id)
    await q.message.edit_text(text, reply_markup=cart_ikb(True), parse_mode=ParseMode.HTML)

async def back_catalog_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_catalog(update, context)

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    text,total=cart_summary(uid)
    await update.message.reply_text(text, reply_markup=cart_ikb(bool(get_cart(uid))), parse_mode=ParseMode.HTML)

async def clear_cart_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q=update.callback_query
    with CART_LOCK:
        CART[q.from_user.id]={}
    await q.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    text,_=cart_summary(q.from_user.id)
    await q.message.edit_text(text, reply_markup=cart_ikb(False), parse_mode=ParseMode.HTML)

# ‚Äî‚Äî‚Äî –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
async def checkout_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q=update.callback_query
    items=get_cart(q.from_user.id)
    if not items:
        await q.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        return ConversationHandler.END
    user=q.from_user
    username=f"@{user.username}" if user.username else None
    if username:
        context.user_data["contact"]=username
        await q.message.edit_text(
            f"<b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n{DIV}\n–í–∞—à username: {username}\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–ø–æ–∂–µ–ª–∞–Ω–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é).",
            parse_mode=ParseMode.HTML
        )
        return ASK_NOTE
    else:
        await q.message.edit_text(
            f"<b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n{DIV}\n–£ –≤–∞—Å –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ @username.\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∏–∫ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω).",
            parse_mode=ParseMode.HTML
        )
        return ASK_CONTACT

async def ask_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "contact" not in context.user_data:
        context.user_data["contact"]=update.message.text.strip()
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é).")
        return ASK_NOTE
    context.user_data["note"]=update.message.text.strip()
    await update.message.reply_text(
        f"<b>–û–ø–ª–∞—Ç–∞</b>\n{DIV}\n–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n<a href=\"{CARD_DETAILS}\">{CARD_DETAILS}</a>\n\n{PAY_INSTRUCTIONS}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏/—á–µ–∫–∞.",
        parse_mode=ParseMode.HTML
    )
    return ASK_TXN

async def ask_txn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["note"]=update.message.text.strip()
    await update.message.reply_text(
        f"<b>–û–ø–ª–∞—Ç–∞</b>\n{DIV}\n–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n<a href=\"{CARD_DETAILS}\">{CARD_DETAILS}</a>\n\n{PAY_INSTRUCTIONS}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏/—á–µ–∫–∞.",
        parse_mode=ParseMode.HTML
    )
    return ASK_TXN

async def finish_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.message.from_user; uid=user.id
    txn=update.message.text.strip()
    items=get_cart(uid); _,total=cart_summary(uid)
    order={
        "timestamp": datetime.utcnow().isoformat()+"Z",
        "user_id": uid,
        "user": {"username": user.username, "first_name": user.first_name, "last_name": user.last_name},
        "items": [{"id": pid, "title": PRODUCTS[pid].title, "qty": qty, "price": PRODUCTS[pid].price} for pid,qty in items.items()],
        "total": total, "contact": context.user_data.get("contact"), "note": context.user_data.get("note"), "transaction": txn,
    }
    append_order(order)
    if ADMIN_ID:
        cart_lines="\n".join(f"‚Ä¢ {PRODUCTS[pid].title} √ó {qty} = {PRODUCTS[pid].price*qty}‚ÇΩ" for pid,qty in items.items())
        admin_text=(f"üßæ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n{DIV}\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user_mention(user)} (id {uid})\n"
                    f"–ö–æ–Ω—Ç–∞–∫—Ç: {order['contact']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['note']}\n\n{cart_lines}\n\n"
                    f"<b>–ò—Ç–æ–≥–æ: {total}‚ÇΩ</b>\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è/—á–µ–∫: <code>{txn}</code>")
        try: await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text, parse_mode=ParseMode.HTML)
        except: pass
    with CART_LOCK:
        CART[uid]={}
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=menu_kb())
    return ConversationHandler.END

async def cancel_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb())
    return ConversationHandler.END

# ‚Äî‚Äî‚Äî –í–æ–ø—Ä–æ—Å/–ø–æ–¥–¥–µ—Ä–∂–∫–∞
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]], resize_keyboard=True, one_time_keyboard=True))
    return 1001

async def forward_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.message.from_user; text=update.message.text.strip()
    admin_text=(f"üì© <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</b>\n{DIV}\n–û—Ç: {user_mention(user)} (id {user.id})\n\n<b>–¢–µ–∫—Å—Ç:</b>\n{text}\n\n"
                f"‚úèÔ∏è –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ:\n/reply {user.id} –≤–∞—à_—Ç–µ–∫—Å—Ç")
    if ADMIN_ID:
        try: await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text, parse_mode=ParseMode.HTML)
        except: pass
    await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞.", reply_markup=menu_kb())
    return ConversationHandler.END

async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat_id != ADMIN_ID: return
    if len(context.args)<2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply user_id —Ç–µ–∫—Å—Ç"); return
    try: user_id=int(context.args[0])
    except: await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π user_id."); return
    reply_text=" ".join(context.args[1:]).strip()
    if not reply_text: await update.message.reply_text("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."); return
    try:
        await context.bot.send_message(chat_id=user_id, text=f"üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply_text}")
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")

# ‚Äî‚Äî‚Äî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞/LookSMM
from handlers.balance_pay import register_balance_handlers

def build_application() -> Application:
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^–ö–∞—Ç–∞–ª–æ–≥$"), show_catalog))
    app.add_handler(CallbackQueryHandler(view_product_cb, pattern=r"^view:"))
    app.add_handler(CallbackQueryHandler(add_to_cart_cb, pattern=r"^add:"))
    app.add_handler(CallbackQueryHandler(back_catalog_cb, pattern=r"^back:catalog$"))
    app.add_handler(MessageHandler(filters.Regex("^–ö–æ—Ä–∑–∏–Ω–∞$"), show_cart))
    app.add_handler(CallbackQueryHandler(clear_cart_cb, pattern=r"^clear$"))

    checkout_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(checkout_cb, pattern=r"^checkout$")],
        states={
            ASK_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_note)],
            ASK_NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_txn)],
            ASK_TXN: [
                MessageHandler(filters.Regex(r"^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ$"), cancel_checkout),
                MessageHandler(filters.TEXT & ~filters.COMMAND, finish_order),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex(r"^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ$"), cancel_checkout)],
        allow_reentry=True,
    )
    app.add_handler(checkout_conv)

    ask_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^üìû –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å$"), ask_question)],
        states={
            1001: [
                MessageHandler(filters.Regex(r"^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ$"), cancel_checkout),
                MessageHandler(filters.TEXT & ~filters.COMMAND, forward_question),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex(r"^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ$"), cancel_checkout)],
        allow_reentry=True,
    )
    app.add_handler(ask_conv)

    app.add_handler(MessageHandler(filters.Regex("^üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º$"),
            lambda u,c: u.message.reply_text("üì¨ –ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä—è–º—É—é: @Delay34", reply_markup=menu_kb())))

    app.add_handler(CommandHandler("reply", reply_command))

    # –ë–∞–ª–∞–Ω—Å/–æ–ø–ª–∞—Ç–∞/LookSMM
    register_balance_handlers(app)

    return app

if __name__ == "__main__":
    application = build_application()
    print("‚úÖ Bot is running on Render (BoostX)")
    application.run_polling()
