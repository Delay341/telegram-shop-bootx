# -*- coding: utf-8 -*-
"""
BoostX Telegram Bot ‚Äî –≤–µ—Ä—Å–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º, –æ–ø–ª–∞—Ç–æ–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π LookSMM
–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ python-telegram-bot==21.x
"""

from __future__ import annotations
import os
import json
from pathlib import Path
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

# ------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
# ------------------------------------------------------------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
ORDERS_FILE = os.getenv("ORDERS_FILE", "orders.json")
PAY_INSTRUCTIONS = os.getenv(
    "PAY_INSTRUCTIONS",
    "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç.",
)

# ------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
# ------------------------------------------------------------
def load_json(path: str | Path, default):
    try:
        p = Path(path)
        if not p.exists():
            return default
        return json.loads(p.read_text(encoding="utf-8"))
    except Exception:
        return default

# ------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
# ------------------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>BoostX</b>!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ /topup –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="balance")]
    ])
    await update.message.reply_html(text, reply_markup=kb)


async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products = load_json("config/products.json", [])
    if not products:
        await update.callback_query.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç.")
        return

    msg = "<b>–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∏–∂–µ:\n"
    for p in products:
        msg += f"üíé {p['name']} ‚Äî <b>{p['price']}‚ÇΩ</b>\n"
    await update.callback_query.message.reply_html(msg)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/catalog ‚Äî –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥\n"
        "/balance ‚Äî –±–∞–ª–∞–Ω—Å\n"
        "/topup <—Å—É–º–º–∞> ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/services ‚Äî —É—Å–ª—É–≥–∏ LookSMM\n"
        "/buy <id> <—Å—Å—ã–ª–∫–∞> <–∫–æ–ª-–≤–æ> ‚Äî –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É\n"
    )

# ------------------------------------------------------------
# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É –±–∞–ª–∞–Ω—Å–∞ –∏ LookSMM
# ------------------------------------------------------------
from handlers.balance_pay import register_balance_handlers

# ------------------------------------------------------------
# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ------------------------------------------------------------
def build_application():
    app = ApplicationBuilder().token(BOT_TOKEN).parse_mode(ParseMode.HTML).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(show_catalog, pattern="catalog"))

    register_balance_handlers(app)
    return app

# ------------------------------------------------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ------------------------------------------------------------
if __name__ == "__main__":
    application = build_application()
    print("Bot is running...")
    application.run_polling()
