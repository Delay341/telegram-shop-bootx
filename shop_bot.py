# -*- coding: utf-8 -*-
"""
BoostX Telegram Bot ‚Äî –≤–µ—Ä—Å–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º, —Ä—É—á–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π LookSMM.
–ì–æ—Ç–æ–≤–æ –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Render (python shop_bot.py).
"""

from __future__ import annotations
import os, json
from pathlib import Path

from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    Defaults,
)
from telegram.constants import ParseMode

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
ORDERS_FILE = os.getenv("ORDERS_FILE", "orders.json")
PAY_INSTRUCTIONS = os.getenv(
    "PAY_INSTRUCTIONS",
    "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç.",
)

def load_products():
    path = Path("config/config.json")
    if not path.exists():
        return []
    try:
        data = json.loads(path.read_text(encoding="utf-8"))
        products = []
        for category in data.get("categories", []):
            for item in category.get("items", []):
                name = item.get("title") or item.get("name") or "‚Äî"
                price = item.get("price", "‚Äî")
                products.append({"name": name, "price": price})
        return products
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:", e)
        return []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>BoostX</b>!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ /topup –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."
    )
    kb = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
            [InlineKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        ]
    )
    if update.message:
        await update.message.reply_html(text, reply_markup=kb)
    elif update.callback_query:
        await update.callback_query.message.reply_html(text, reply_markup=kb)

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products = load_products()
    if not products:
        await update.callback_query.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç.")
        return

    msg = "<b>–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∏–∂–µ:\n"
    for p in products:
        name = p.get("name", "‚Äî")
        price = p.get("price", "‚Äî")
        msg += f"üíé {name} ‚Äî <b>{price}‚ÇΩ</b>\n"
    await update.callback_query.message.reply_html(msg)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/catalog ‚Äî –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ (–∫–Ω–æ–ø–∫–∞ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª)\n"
        "/balance ‚Äî –±–∞–ª–∞–Ω—Å\n"
        "/topup &lt;—Å—É–º–º–∞&gt; ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/services ‚Äî —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ LookSMM\n"
        "/buy &lt;id&gt; &lt;—Å—Å—ã–ª–∫–∞&gt; &lt;–∫–æ–ª-–≤–æ&gt; ‚Äî –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞\n"
        "/confirm_payment &lt;invoice_id&gt; ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (–∞–¥–º–∏–Ω)\n"
    )

from handlers.balance_pay import register_balance_handlers

def build_application():
    defaults = Defaults(parse_mode=ParseMode.HTML)
    app = ApplicationBuilder().token(BOT_TOKEN).defaults(defaults).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(show_catalog, pattern="^catalog$"))
    register_balance_handlers(app)
    return app

if __name__ == "__main__":
    application = build_application()
    print("Bot is running...")
    application.run_polling()
